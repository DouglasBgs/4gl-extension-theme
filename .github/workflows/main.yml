on:
  push:
    branches: ["master"]
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: ["master"]
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release
env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  cicd:
    name: cicd
    runs-on: windows-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.9
        with:
          versionSpec: "5.1.x"

      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9

      - name: print gitversion
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: clean install dependencies
        run: npm ci

      - name: update metadata in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: "${{github.workspace}}/package.json"
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.semVer }}"
            
      - name: add version in CHANGELOG.md
        uses: cschleiden/replace-tokens@v1.0
        with:
          files: "${{github.workspace}}/CHANGELOG.md"
        env:
          VERSION: "${{ steps.gitversion.outputs.semVer }}"

      - name: compile and create vsix
        run: |
          npm run esbuild
          npm run build

      - name: print vsix path
        run: |
          echo "VSIX Path: ${{ env.vsix_path }}"

      - name: upload vsix as artifact
        uses: actions/upload-artifact@v3
        with:
          name: 4gltools-${{steps.gitversion.outputs.semVer}}.vsix
          path: ${{github.workspace}}\4gltools-${{steps.gitversion.outputs.semVer}}.vsix
      - name: create a release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: v${{ steps.gitversion.outputs.semVer }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: .\4gltools-${{steps.gitversion.outputs.semVer}}.vsix
          asset_name: 4gltools-${{steps.gitversion.outputs.semVer}}.vsix
          asset_content_type: application/vsix
          
